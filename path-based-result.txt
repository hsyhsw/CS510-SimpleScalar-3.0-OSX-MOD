sim-bpred: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-bpred -bpred piecewise -bpred:piecewise 1 65536 63 bench/gap00.peak.ev6 -l bench/gap.input/ -m 100M 

sim: simulation started @ Wed May 21 01:56:13 2014, options follow:

sim-bpred: This simulator implements a branch predictor analyzer.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-bpred              piecewise # branch predictor type {nottaken|taken|bimod|2lev|piecewise|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:piecewise 1 65536 63 # piecewise linear predictor config (<n> <m> <h>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg      : 1, W, 2^W, 0
      GAp      : 1, W, M (M > 2^W), 0
      PAg      : N, W, 2^W, 0
      PAp      : N, W, M (M == 2^(N+W)), 0
      gshare   : 1, W, 2^W, 1
      piecewise: piecewise linear predictor with default config (n, m, h) = (256, 256, 63)
      Predictor `comb' combines a bimodal and a 2-level predictor.



sim: ** starting functional simulation w/ predictors **
warning: partially supported sigaction() call...
warning: partially supported sigprocmask() call...

sim: ** simulation statistics **
sim_num_insn           269899499890 # total number of instructions executed
sim_num_refs           103690696642 # total number of loads and stores executed
sim_elapsed_time              13439 # total simulation time in seconds
sim_inst_rate          20083302.3209 # simulation speed (in insts/sec)
sim_num_branches        34191509555 # total number of branches executed
sim_IPB                      7.8938 # instruction per branch
bpred_piecewise_linear.lookups  34191509555 # total number of bpred lookups
bpred_piecewise_linear.updates  34191509555 # total number of updates
bpred_piecewise_linear.addr_hits  32690565693 # total number of address-predicted hits
bpred_piecewise_linear.dir_hits  33769986471 # total number of direction-predicted hits (includes addr-hits)
bpred_piecewise_linear.misses    421523084 # total number of misses
bpred_piecewise_linear.jr_hits   5672958589 # total number of address-predicted hits for JR's
bpred_piecewise_linear.jr_seen   6748297847 # total number of JR's seen
bpred_piecewise_linear.jr_non_ras_hits.PP   1768525442 # total number of address-predicted hits for non-RAS JR's
bpred_piecewise_linear.jr_non_ras_seen.PP   2832197213 # total number of non-RAS JR's seen
bpred_piecewise_linear.bpred_addr_rate    0.9561 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_piecewise_linear.bpred_dir_rate    0.9877 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_piecewise_linear.bpred_jr_rate    0.8407 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_piecewise_linear.bpred_jr_non_ras_rate.PP    0.6244 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_piecewise_linear.retstack_pushes   3916103457 # total number of address pushed onto ret-addr stack
bpred_piecewise_linear.retstack_pops   3916100634 # total number of address popped off of ret-addr stack
bpred_piecewise_linear.used_ras.PP   3916100634 # total number of RAS predictions used
bpred_piecewise_linear.ras_hits.PP   3904433147 # total number of RAS hits
bpred_piecewise_linear.ras_rate.PP    0.9970 # RAS prediction rate (i.e., RAS hits/used RAS)

